fastlane_require 'colored'
fastlane_require 'yaml'
fastlane_require 'json'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# MARK: - Fastlane 

platform :ios do
  desc "Runs Unit Tests & Calculates Coverage for specific parts of the project"
  lane :test do
    scan(code_coverage: true, output_directory: "./Reports")
    slather(html: true, show: false)
    lizard(language: "swift", export_type: "html", report_file: "./Reports/Lizard/Lizard.html")
  end

  desc "Builds and prepare Internal Testers"
  lane :build_for_internal_testers do 
    build_app(
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates",
      configuration: "Beta",
      export_team_id: ENV["TEAM_ID"],
      export_options: {
        provisioningProfiles: {
          "com.alnajd.alnajd.ios.beta" => "match AppStore com.alnajd.alnajd.ios.beta"
        }
      }
    )

    # Set DSYM Path for Sentry from SharedValues
    ENV['SENTRY_DSYM_PATH'] = lane_context[SharedValues::DSYM_OUTPUT_PATH]
  end

  desc "Builds and prepare Staging build"
  lane :build_for_staging do 
    sync_code_signing(
      type: "appstore",
        app_identifier: "com.cafu.ev.customer.staging",
        api_key: app_store_connect_api_key(
          key_id: ENV['ASCAPI_KEY_ID'],
          issuer_id: ENV['ASCAPI_ISSUER_ID'],
          key_filepath: "AuthKey_5LVSVRR9D3.p8"
        )
      )

    build_app(
      scheme: "CAFU",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates",
      configuration: "Staging",
      export_team_id: ENV["TEAM_ID"],
      export_options: {
        provisioningProfiles: {
          "com.cafu.ev.customer.staging" => "match AppStore com.cafu.ev.customer.staging"
        }
      }
    )
  end

  desc "Builds and prepare production build"
  lane :build_for_production do 
    sync_code_signing(
      type: "appstore",
        app_identifier: "com.cafu.ev.customer",
        api_key: app_store_connect_api_key(
          key_id: ENV['ASCAPI_KEY_ID'],
          issuer_id: ENV['ASCAPI_ISSUER_ID'],
          key_filepath: "AuthKey_5LVSVRR9D3.p8"
        )
      )

    build_app(
      scheme: "CAFU",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates",
      configuration: "Production",
      export_team_id: ENV["TEAM_ID"],
      export_options: {
        provisioningProfiles: {
          "com.cafu.ev.customer" => "match AppStore com.cafu.ev.customer"
        }
      }
    )
  end

  desc "Build and prepare for AdHoc CI providers"
  lane :ci_build_for_adhoc do
    update_code_signing_settings(
      use_automatic_signing: true,
      profile_name: "match AdHoc com.cafu.ev.customer.review",
    )

    build_app(
      scheme: "CAFU",
      export_method: "ad-hoc",
      export_xcargs: "-allowProvisioningUpdates",
      configuration: "Review",
      export_team_id: ENV["TEAM_ID"],
      output_name: "CAFU.ipa",
      export_options: {
        provisioningProfiles: {
          "com.cafu.ev.customer.review" => "match AdHoc com.cafu.ev.customer.review"
        }
      }
    )
  end

  desc "Build and prepare for AdHoc CI providers"
  lane :ci_build_for_appstore do
    build_app(
      scheme: "CAFU",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates",
      configuration: "Review",
      export_team_id: ENV["TEAM_ID"],
      output_name: "CAFU.ipa",
      export_options: {
        provisioningProfiles: {
          "com.cafu.ev.customer" => "match AppStore com.cafu.ev.customer"
        }
      }
    )
  end
end

# MARK: - ------------ Helpers ------------
def input(placeholder)
  return prompt(text: placeholder)
end

def nilOrEmpty(variable)
  return variable.nil? || variable.empty?
end 

def file_prepend(file, str)
  # Check if file exists
  if File.exist?(file)
    new_contents = ""
    File.open(file, 'r') do |fd|
      contents = fd.read
      new_contents = "#{str}\n\n\n#{contents}"
    end
    # Overwrite file but now with prepended string on it
    File.open(file, 'w') do |fd| 
      fd.write(new_contents)
    end
  else
    # Create file & recurse
    FileUtils.touch(file)
    file_prepend(file, str)
  end
end
# MARK: - ------------ Helpers ------------