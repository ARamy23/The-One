# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

# Gathering 3rd party Keys and Secrets from Configs
configs = JSON.parse(File.read('./Config.json'), object_class: OpenStruct)

def file_prepend(file, str)
  new_contents = ""
  File.open(file, 'r') do |fd|
    contents = fd.read
    new_contents = str << contents
  end
  # Overwrite file but now with prepended string on it
  File.open(file, 'w') do |fd| 
    fd.write(new_contents)
  end
end

platform :ios do
  before_all do
    
  end
  
  private_lane :update_changelog do 
    tags = git_tags(limit: 2)
    current_tag = tags.first
    changelog = changelog_from_git_commits(
      between: tags,  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "    - %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )

    file_prepend('../CHANGELOG.md', "## Updates of version #{current_tag} ðŸš€\n#{changelog}\n\n")
  end

  lane :beta do 
    # Beta Release
    setup_ci if ENV['CI']
    # Handles any versionings and Changelogs maintenance
    xcode_vesion = get_version_number(target: "Al Najd (iOS)")
    latest_git_tag_version = last_git_tag

    is_same_vesion = Gem::Version.new(xcode_vesion) == Gem::Version.new(latest_git_tag_version)
    is_new_version = Gem::Version.new(xcode_vesion) < Gem::Version.new(latest_git_tag_version)

    if is_same_vesion
      increment_build_number
    elsif is_new_version
      increment_build_number(
        build_number: 1
      )

      increment_version_number(
        version_number: latest_git_tag_version
      )
    else 
      abort(`Something went wrong, the Xcode version can't be greater than the latest git tag version\nCurrentVersion: #{xcode_vesion}\nGit Tag Version: #{latest_git_tag_version}`)
    end

    # Builds and prepare for exporting the app
    gym(
      scheme: "The One (iOS)",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates"
    )
    # Generate Changelogs from Git commits
    changelog = changelog_from_git_commits(
      between: git_tags(limit: 2),  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )
    
    update_changelog

    # Uploads the app to Testflight
    pilot(
      changelog: changelog,
    )

    # Upload dSYM files to Sentry
    # upload_symbols_to_sentry
    # Deletes the generated Archive, IPA, Certificates, Profiles and/or dSYM Files
    clean_build_artifacts
    # Report Success
    # slack
    git_add
    git_commit(message: "ðŸš€ Released iOS #{get_version_number(target: "Al Najd (iOS)")}! [Beta Release]")
    push_to_git_remote
  end

  lane :test_slack do
    # slack(message: "Testing Webhook")
  end

  error do |lane, exception, options|
    # slack(
    #   message: "Ooops, looks like something went wrong :O\n\n\n#{exception.message}",
    #   success: false
    # )
  end
end
