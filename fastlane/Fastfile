# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

# Gathering 3rd party Keys and Secrets from Configs
configs = JSON.parse(File.read('./Config.json'), object_class: OpenStruct)

def file_prepend(file, str)
  new_contents = ""
  File.open(file, 'r') do |fd|
    contents = fd.read
    new_contents = str << contents
  end
  # Overwrite file but now with prepended string on it
  File.open(file, 'w') do |fd| 
    fd.write(new_contents)
  end
end

platform :ios do
  before_all do
    
  end
  
  desc "Load ASC API Key information to use in subsequent lanes"
  lane :load_asc_api_key do
   app_store_connect_api_key(
     key_id: ENV["ASC_KEY_ID"],
     issuer_id: ENV["ASC_ISSUER_ID"],
     key_content: ENV["ASC_KEY"],
     in_house: false # detecting this via ASC private key not currently supported
   )
  end

  desc "Bump build number based on most recent TestFlight build number"
  lane :fetch_and_increment_build_number do
    #fetch read your app identifier defined in your Appfile
    app_identifier = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
  
    current_version = get_version_number(
      target: "Al\ Najd\ (iOS)" # replace with your main target, required if you have more than one non-test target
    )

    latest_build_number = latest_testflight_build_number(
      api_key: api_key,
      version: current_version,
      app_identifier: app_identifier
    )

    increment_build_number(
      build_number: (latest_build_number + 1),
    )
  end

  desc "Upload to TestFlight / ASC"
  lane :upload_release do
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]

    deliver(
        api_key: api_key,
        skip_screenshots: true,
        skip_metadata: true,
        skip_app_version_update: true,
        force: true, # skips verification of HTML preview file (since this will be run from a CI machine)
        run_precheck_before_submit: false # not supported through ASC API yet
    )
  end

  desc "Check certs and profiles"
  lane :prepare_signing do |options|
    app_id = CredentialsManager::AppfileConfig.try_fetch_value(:app_identifier)
    api_key = lane_context[SharedValues::APP_STORE_CONNECT_API_KEY]
    
    profile_name = "App Provisioning Profile" # replace with the name of your existing profile, or define a name for the profile that fastlane will create if itâ€™s not found
    
    cert(
        api_key: api_key,
        keychain_path: ENV["KEYCHAIN_PATH"] # the path to the keychain where your certificates are stored
      )
    
    # main app profile
    sigh(
      api_key: api_key,
      app_identifier: app_id,
      provisioning_name: profile_name,
      force: true # always recreate this exact profile to ensure it's valid and not expired
    )
  end

  desc "Build and upload to TestFlight"
  lane :build_upload_testflight do
     load_asc_api_key
     prepare_signing
     fetch_and_increment_build_number
     build_release
     upload_release
  end

  private_lane :update_changelog do 
    tags = git_tags(limit: 2)
    current_tag = tags.first
    changelog = changelog_from_git_commits(
      between: tags,  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "    - %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )

    file_prepend('../CHANGELOG.md', "## Updates of version #{current_tag} ðŸš€\n#{changelog}\n\n")
  end

  lane :closed_beta do
    keychain_name = TEMP_KEYCHAIN_USER
    keychain_password = TEMP_KEYCHAIN_PASSWORD
    ensure_temp_keychain(keychain_name, keychain_password)

    api_key = app_store_connect_api_key(
      key_id: APPLE_KEY_ID,
      issuer_id: APPLE_ISSUER_ID,
      key_content: APPLE_KEY_CONTENT,            
      duration: 1200,            
      in_house: false
    )
    
    increment_build_number(xcodeproj: "your_project_name.xcodeproj")

    match(
      type: 'appstore',
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      git_basic_authorization: Base64.strict_encode64(GIT_AUTHORIZATION),
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      api_key: api_key
    )

    gym(
      configuration: "Release",
      workspace: "Al\ Najd.xcworkspace",
      scheme: "Al\ Najd",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
            DEVELOPER_APP_ID => PROVISIONING_PROFILE_SPECIFIER
        }
      }
    )

    # Generate Changelogs from Git commits
    changelog = changelog_from_git_commits(
      between: git_tags(limit: 2),  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )
    
    update_changelog

    pilot(
      apple_id: "#{DEVELOPER_APP_ID}",
      app_identifier: "#{DEVELOPER_APP_IDENTIFIER}",
      skip_waiting_for_build_processing: true,
      skip_submission: true,
      distribute_external: false,
      notify_external_testers: false,
      ipa: "./your_app_name.ipa"
    )

    delete_temp_keychain(keychain_name)
  end

  lane :beta do 
    # Beta Release
    setup_ci if ENV['CI']
    # Handles any versionings and Changelogs maintenance
    xcode_vesion = get_version_number(target: "Al Najd (iOS)")
    latest_git_tag_version = last_git_tag

    is_same_vesion = Gem::Version.new(xcode_vesion) == Gem::Version.new(latest_git_tag_version)
    is_new_version = Gem::Version.new(xcode_vesion) < Gem::Version.new(latest_git_tag_version)

    if is_same_vesion
      increment_build_number
    elsif is_new_version
      increment_build_number(
        build_number: 1
      )

      increment_version_number(
        version_number: latest_git_tag_version
      )
    else 
      abort(`Something went wrong, the Xcode version can't be greater than the latest git tag version\nCurrentVersion: #{xcode_vesion}\nGit Tag Version: #{latest_git_tag_version}`)
    end

    # Builds and prepare for exporting the app
    gym(
      scheme: "The One (iOS)",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates"
    )
    # Generate Changelogs from Git commits
    changelog = changelog_from_git_commits(
      between: git_tags(limit: 2),  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )
    
    update_changelog

    # Uploads the app to Testflight
    pilot(
      changelog: changelog,
      distribute_external: true,
      groups: ['App Store Connect Users', 'Beta Testers']
    )

    # Upload dSYM files to Sentry
    # upload_symbols_to_sentry
    # Deletes the generated Archive, IPA, Certificates, Profiles and/or dSYM Files
    clean_build_artifacts
    # Report Success
    # slack
    git_add
    git_commit(
      message: "ðŸš€ Released iOS #{get_version_number(target: "Al Najd (iOS)")}! [Beta Release]",
      path: "*"
    )
    push_to_git_remote
  end

  lane :test_slack do
    # slack(message: "Testing Webhook")
  end

  error do |lane, exception, options|
    # slack(
    #   message: "Ooops, looks like something went wrong :O\n\n\n#{exception.message}",
    #   success: false
    # )
  end
end
