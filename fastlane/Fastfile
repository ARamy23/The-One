fastlane_require 'colored'
fastlane_require 'yaml'
fastlane_require 'json'

import './Build & Test/Fastfile'
import './CHANGELOG Generation/Fastfile'
import './CI Environment Adaption/Fastfile'
import './Match/Fastfile'
import './Release/Fastfile'
import './Syncing Develop & Main/Fastfile'
import './Versioning/Fastfile'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# MARK: - Fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_for_ci_if_needed
  end

  desc "Helps devs to release easier without much hassle" 
  lane :manual_release do
    release_type = UI.select("Select which type of release you're looking for...", ['Adhoc', 'TestFlight-Review', 'TestFlight-Staging', 'Directly to the AppStore'])

    case release_type
    when "Adhoc"
      UI.important "You've come to the wrong place my brother, AdHoc is handled by Bitrise"
    when "TestFlight-Review"
      UI.success "Alright, doing so now!"
      beta
    when "TestFlight-Staging"
      UI.success "Alright, doing so now!"
      staging
    when "Directly to the AppStore"
      UI.user_error! "Sorry, but AppStore Lane is not yet done... ðŸ˜“"
    else
      UI.user_error! "Whoops, looks like you picked something wrong this time, its ok, happens to the best of us, now re-run me again ðŸ˜›"
    end
  end

  lane :ensure_being_on_develop do 
    current_branch = `git rev-parse --abbrev-ref HEAD`.strip
    if current_branch == 'develop'
      UI.success "Alright, we r on develop, that's great..."
    else
      UI.user_error! "Umm... you need to be on develop to ensure smooth launching... ðŸ‘‰ðŸ‘ˆ"
    end
  end
  
  desc "Releases the app to TestFlight for Internal Testers"
  lane :beta do |options|
    ensure_being_on_develop
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    build_for_internal_testers
    push_to_testflight(notes: changelog)
    sync_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
    clean_build_artifacts
  end

  desc "Releases the app to TestFlight for Staging"
  lane :staging do |options|
    ensure_being_on_develop
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    build_for_staging
    push_to_testflight(notes: changelog)
    sync_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
    clean_build_artifacts
  end

  desc "Releases app internally to TestFlight from CI environment"
  lane :ci_beta do |options|
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    ci_build_for_adhoc
    sync_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
  end

  desc "Release the app directly to the AppStore"
  lane :production do |options|
    setup_for_ci_if_needed
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    build_for_production
    push_to_testflight(notes: changelog)
    sync_production_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
    clean_build_artifacts
  end

  desc "Release the app directly to the AppStore"
  lane :ci_production do |options|
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    ci_build_for_appstore
    sync_production_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
  end
end