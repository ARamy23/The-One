fastlane_require 'colored'
fastlane_require 'yaml'
fastlane_require 'json'

import './Build & Test/Fastfile'
import './CHANGELOG Generation/Fastfile'
import './CI Environment Adaption/Fastfile'
import './Match/Fastfile'
import './Release/Fastfile'
import './Syncing Develop & Main/Fastfile'
import './Versioning/Fastfile'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# MARK: - Fastlane

default_platform(:ios)

platform :ios do
  before_all do
    setup_environment
    setup_for_ci_if_needed
  end

  desc "Sets up Environment Variables provided from CAFU"
  lane :setup_environment do
    UI.header "Setting up Environment Variables..."

    Dotenv.load ".env.default.auth"
    Dotenv.load ".env.default.formatting"
    Dotenv.load ".env.default.project"
    Dotenv.load ".env.default.plugins"

    UI.success "Environment Variables are set up successfully!"
  end

  desc """
  Automated Release, expects release env & version number & Build Number
  Supported Envs: qa, staging, production
  """
  lane :release do |options|
    UI.header "Starting Automated Release..."
    ensure_being_on_develop
    # ensure_git_status_clean
    ensure_release_options(options[:env], options[:build_number])
    validate_tag_environment
    update_build_number
    release_according_to_environment
  end

  lane :release_according_to_environment do |options|
    case ENV['RELEASE_TARGET_ENV']
    when "alpha"
      UI.success "1 alpha Build, Coming right up!"
      beta
    when "beta"
      UI.success "1 beta Build, Coming right up!"
      beta
    when "prod"
      UI.success "1 Production Build, Coming right up!"
      production
    else
      UI.user_error! "Whoops, looks like you picked a wrong environment this time, its ok, happens to the best of us, now re-run me again ðŸ˜›"
    end
  end

  def ensure_release_options(env, build_number)
    UI.user_error! "Please provide the environment you'd like to release to, e.g. fastlane release env:alpha" unless env
    UI.user_error! "Please provide the Build Number you'd like to release with, e.g. fastlane release build_number:123" unless build_number

    ENV['RELEASE_TARGET_ENV'] = env
    ENV['RELEASE_TARGET_BUILD_NUMBER'] = build_number

    UI.important "Release Target Environment: #{env}"
    UI.important "Release Target Build Number: #{build_number}"

    UI.success "Release Options are set up successfully!"
  end

  desc "Helps devs to release easier without much hassle" 
  lane :interactive_release do
    env = UI.select("Select which environment you'd like to release to...", ['alpha', 'beta', 'prod'])
    build_number = UI.input("Enter the Build Number")

    release(env: env, build_number: build_number)
  end
  
  desc "Releases the app to TestFlight for Internal Testers"
  lane :beta do |options|
    ensure_being_on_develop
    ensure_git_status_clean()
    sentry_check_cli_installed()
    validate_tag()
    sentry_create_release(version: ENV['RELEASE_TARGET_TAG'], app_identifier: 'com.alnajd.alnajd.ios.beta')
    build_for_internal_testers()
    push_to_testflight(notes: "")
    sentry_set_commits(version: ENV['RELEASE_TARGET_TAG'], auto: true, ignore_missing: true)
    sentry_upload_dif()
    sentry_finalize_release(version: ENV['RELEASE_TARGET_TAG'])
    clean_build_artifacts()
  end

  desc "Releases the app to TestFlight for Staging"
  lane :staging do |options|
    ensure_being_on_develop
    ensure_git_status_clean
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    build_for_staging
    push_to_testflight(notes: changelog)
    sync_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
    clean_build_artifacts
  end

  desc "Releases app internally to TestFlight from CI environment"
  lane :ci_beta do |options|
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    ci_build_for_adhoc
    sync_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
  end

  desc "Release the app directly to the AppStore"
  lane :production do |options|
    setup_for_ci_if_needed
    ensure_being_on_develop
    ensure_git_status_clean
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    build_for_production
    push_to_testflight(notes: changelog)
    sync_production_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
    clean_build_artifacts
  end

  desc "Release the app directly to the AppStore"
  lane :ci_production do |options|
    version
    changelog = make_changelogs
    prepare_for_release
    notes = make_changelog_more_readable(notes: changelog)
    ci_build_for_appstore
    sync_production_release_branch(notes: changelog)
    gitlab_release(notes: changelog)
  end
end