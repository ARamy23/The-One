# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

# Gathering 3rd party Keys and Secrets from Configs
configs = JSON.parse(File.read('./Config.json'), object_class: OpenStruct)

def file_prepend(file, str)
  new_contents = ""
  File.open(file, 'r') do |fd|
    contents = fd.read
    new_contents = str << contents
  end
  # Overwrite file but now with prepended string on it
  File.open(file, 'w') do |fd| 
    fd.write(new_contents)
  end
end

platform :ios do
  lane :setup_for_ci_if_needed do
    setup_ci if ENV['CI']
  end

  desc "Handles any versionings and Changelogs maintenance"
  lane :handle_versioning do
    xcode_vesion = get_version_number(target: "Al Najd (iOS)")
    latest_git_tag_version = last_git_tag

    is_same_vesion = Gem::Version.new(xcode_vesion) == Gem::Version.new(latest_git_tag_version)
    is_new_version = Gem::Version.new(xcode_vesion) < Gem::Version.new(latest_git_tag_version)

    if is_same_vesion
      increment_build_number
    elsif is_new_version
      increment_build_number(
        build_number: 1
      )

      increment_version_number(
        version_number: latest_git_tag_version
      )
    else 
      increment_build_number(
        build_number: 1
      )

      add_git_tag(
        git_tag: xcode_vesion
      )
    end
  end

  desc "Builds and prepare for exporting the app to the App Store"
  lane :build_for_app_store_distribtion do 
    gym(
      scheme: "Al Najd (iOS)",
      export_method: "app-store",
      export_xcargs: "-allowProvisioningUpdates"
    )
  end

  desc "Uploads the app to Testflight"
  lane :upload_to_testflight do 
    changelog = changelog_from_git_commits(
      between: git_tags(limit: 2),  # Optional, lets you specify a revision/tag range between which to collect commit info
      pretty: "- %s",# Optional, lets you provide a custom format to apply to each commit when generating the changelog text
      date_format: "short",# Optional, lets you provide an additional date format to dates within the pretty-formatted string
      match_lightweight_tag: false,  # Optional, lets you ignore lightweight (non-annotated) tags when searching for the last tag
      merge_commit_filtering: "exclude_merges" # Optional, lets you filter out merge commits
    )
    
    pilot(
      changelog: changelog,
      distribute_external: true,
      groups: ['App Store Connect Users', 'Beta Testers']
    )
  end

  desc "Syncs remote git with the local"
  lane :sync_git do
    git_add
    git_commit(
      message: "ðŸš€ Released iOS #{get_version_number(target: "Al Najd (iOS)")}! [Beta Release]",
      path: "*"
    )
    push_to_git_remote
  end

  lane :beta do 
    setup_for_ci_if_needed
    handle_versioning
    build_for_app_store_distribtion
    upload_to_testflight
    # upload_symbols_to_sentry
    clean_build_artifacts
    # slack
    sync_git
  end

  lane :test_slack do
    # slack(message: "Testing Webhook")
  end

  error do |lane, exception, options|
    # slack(
    #   message: "Ooops, looks like something went wrong :O\n\n\n#{exception.message}",
    #   success: false
    # )
  end
end
