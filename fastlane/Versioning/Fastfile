fastlane_require 'colored'
fastlane_require 'yaml'
fastlane_require 'json'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# MARK: - Fastlane 

default_platform(:ios)

platform :ios do
    desc "Handles reading git history & generating CHANGELOG from it"
    lane :version do
      UI.header "Versioning the project"

      UI.important "Fetching all tags to ensure being in an updated state"
      git_pull(only_tags: true)
      
      tag_format = '*'
      is_releasable = analyze_commits(
        match: tag_format,
        releases: {:fix=>"patch", :feat=>"minor", :hotfix=>"patch"}
      )
      unless is_releasable
        UI.message('Nothing to release, incrementing Build Number')
        ENV["RELEASE_NEXT_VERSION"] = last_git_tag
        ENV["VERSION_NUMBER"] = last_git_tag
        increment_build_number
        xcodegen_update_version_and_build_number(version: ENV["RELEASE_NEXT_VERSION"], build_number: get_build_number)
        next
      end
  
      UI.message('A New tag can be released\n\n')
  
      UI.message('Resetting Build number to 1')
      increment_build_number(build_number: 1)
      
      next_version = lane_context[SharedValues::RELEASE_NEXT_VERSION]
    
      ENV["RELEASE_NEXT_VERSION"] = next_version
      ENV["VERSION_NUMBER"] = next_version
  
      tag = "#{next_version}"
  
      UI.message('Incrementing Version Number')
      increment_version_number(version_number: next_version)
    end

    private_lane :xcodegen_update_version_and_build_number do |options|
      project_yml = YAML.load_file("../project.yml")
      project_json = project_yml.to_h
      project_json["targets"]["CAFU"]["settings"]["base"]["MARKETING_VERSION"] = options[:version]
      project_json["targets"]["CAFU"]["settings"]["base"]["CURRENT_PROJECT_VERSION"] = options[:build_number]
      File.write("../project.yml", project_json.to_yaml)
      system(`xcodegen generate`)
    end
    
    
  desc "Handles any versionings and build numbers"
  private_lane :update_versions_and_build_number do
    xcode_vesion = get_version_number(target: "CAFU")
    latest_git_tag_version = last_git_tag

    is_same_vesion = Gem::Version.new(xcode_vesion) == Gem::Version.new(latest_git_tag_version)
    is_new_version = Gem::Version.new(xcode_vesion) < Gem::Version.new(latest_git_tag_version)

    if is_same_vesion
      UI.message "No Need to Update the version, incrementing the build number"
      # get latest build number
      increment_build_number
      
    elsif is_new_version
      UI.message "New Version Detected, resetting the build number to 1 and updating the version number to #{latest_git_tag_version}"
      increment_build_number(build_number: 1)
      increment_version_number(version_number: latest_git_tag_version)
    else 
      increment_build_number(build_number: 1)
    end

    xcodegen_update_version_and_build_number(version: xcode_vesion, build_number: get_build_number)
  end
end

# MARK: - ------------ Helpers ------------
def input(placeholder)
  return prompt(text: placeholder)
end

def nilOrEmpty(variable)
  return variable.nil? || variable.empty?
end 

def file_prepend(file, str)
  # Check if file exists
  if File.exist?(file)
    new_contents = ""
    File.open(file, 'r') do |fd|
      contents = fd.read
      new_contents = "#{str}\n\n\n#{contents}"
    end
    # Overwrite file but now with prepended string on it
    File.open(file, 'w') do |fd| 
      fd.write(new_contents)
    end
  else
    # Create file & recurse
    FileUtils.touch(file)
    file_prepend(file, str)
  end
end
# MARK: - ------------ Helpers ------------