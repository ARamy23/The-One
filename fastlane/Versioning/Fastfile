fastlane_require 'colored'
fastlane_require 'yaml'
fastlane_require 'json'

# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# MARK: - Fastlane 

platform :ios do
    lane :validate_tag do |options|
      UI.header "Tag Inspectation started! 🧐"
      UI.important "Fetching all tags to ensure being in an updated state"
      git_pull(only_tags: true)
      validate_tag_environment()
      add_tag_to_git()
    end

    lane :add_tag_to_git do |options|
      UI.header "Tag Creation started! 🚀"
      tag_to_add = ENV['RELEASE_TARGET_TAG']
      UI.important "Adding Tag #{tag_to_add} to Git"
      add_git_tag(tag: tag_to_add)
      UI.success "Tag Creation finished! 🚀"
    end

    lane :ensure_being_on_develop do 
      current_branch = `git rev-parse --abbrev-ref HEAD`.strip
      if current_branch == 'develop'
        UI.success "Alright, we r on develop, that's great..."
      else
        UI.user_error! "Umm... you need to be on develop to ensure smooth launching... 👉👈"
      end
    end
    
    def update_build_number()
      UI.important "Updating Build Number, based on latest TestFlight build number"

      new_build_number = latest_testflight_build_number(app_identifier: "com.alnajd.alnajd.ios.beta", initial_build_number: 0) + 1
      increment_build_number(build_number: new_build_number)
      UI.success "Build Number updated! 🚀"
      UI.important "New Build Number: #{new_build_number}"
    end

    def validate_tag_environment()
      UI.header "Tag Validation started! 🧐"
      env = ENV['RELEASE_TARGET_ENV'].upcase
      build_number = ENV['RELEASE_TARGET_BUILD_NUMBER']

      # Check if Tag follows this format ENV-VersionNumber-BuildNumber
      tag = "#{env}-#{get_version_number(target: 'Al Najd (iOS)')}-#{build_number}"
      tag_format = '^[a-zA-Z]+-[0-9]+\.[0-9]+\.[0-9]+-[0-9]+$'
      is_valid = tag.match(tag_format)
      
      unless is_valid
        UI.user_error!("Tag #{tag} does not follow the format #{tag_format} example: BETA-1.0.0-1 (1.0.0 = Version Number) (1 = Build Number)")
      end

      # Get Supported Env through ENV["ALLOWED_ENVIRONMENTS"], which is a string of comma separated values
      allowed_envs = ENV["ALLOWED_ENVIRONMENTS"].split(",")

      # Extract Environment from Tag
      env = tag.split("-")[0]

      # Check if Environment is supported
      unless allowed_envs.include?(env)
        UI.user_error!("Environment #{env} is not supported. Supported Environments are: #{allowed_envs}")
      end

      ENV["RELEASE_TARGET_TAG"] = tag

      UI.success "Validating Inspectation finished! 🚀"
    end
end